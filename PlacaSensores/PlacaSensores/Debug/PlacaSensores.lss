
PlacaSensores.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  000005c4  00000638  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005c4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000638  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000030  00000000  00000000  00000668  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001e4  00000000  00000000  00000698  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000100  00000000  00000000  0000087c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000366  00000000  00000000  0000097c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000074  00000000  00000000  00000ce4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000bf56  00000000  00000000  00000d58  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000bd  00000000  00000000  0000ccae  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000038  00000000  00000000  0000cd6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00004d1d  00000000  00000000  0000cda3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 9a 00 	jmp	0x134	; 0x134 <__ctors_end>
   4:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
   8:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
   c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  10:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  14:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  18:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  1c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  20:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  24:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  28:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  2c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  30:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  34:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  38:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  3c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  40:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  44:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  48:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  4c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  50:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  54:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  58:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  5c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  60:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  64:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  68:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  6c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  70:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  74:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  78:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  7c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  80:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  84:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  88:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  8c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  90:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  94:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  98:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  9c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  a0:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  a4:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  a8:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  ac:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  b0:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  b4:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  b8:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  bc:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  c0:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  c4:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  c8:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  cc:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  d0:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  d4:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  d8:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  dc:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  e0:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  e4:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  e8:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  ec:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  f0:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  f4:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  f8:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
  fc:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
 100:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
 104:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
 108:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
 10c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
 110:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
 114:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
 118:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
 11c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
 120:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
 124:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
 128:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
 12c:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>
 130:	0c 94 a4 00 	jmp	0x148	; 0x148 <__bad_interrupt>

00000134 <__ctors_end>:
 134:	11 24       	eor	r1, r1
 136:	1f be       	out	0x3f, r1	; 63
 138:	cf ef       	ldi	r28, 0xFF	; 255
 13a:	d1 e2       	ldi	r29, 0x21	; 33
 13c:	de bf       	out	0x3e, r29	; 62
 13e:	cd bf       	out	0x3d, r28	; 61
 140:	0e 94 cb 00 	call	0x196	; 0x196 <main>
 144:	0c 94 e0 02 	jmp	0x5c0	; 0x5c0 <_exit>

00000148 <__bad_interrupt>:
 148:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000014c <inittimer>:
DEFINES
------------------------------------------------------------------------*/
//#define F_CLK	16000000

void inittimer(void)
{
 14c:	cf 93       	push	r28
 14e:	df 93       	push	r29
 150:	cd b7       	in	r28, 0x3d	; 61
 152:	de b7       	in	r29, 0x3e	; 62
	//TIMER 0
	// Descripción de registros  
	TCCR0A=(0<<WGM00) | (0<<WGM01) | (0<<WGM02) ; //Normal mode, prescaler clk/8.
 154:	84 e4       	ldi	r24, 0x44	; 68
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	fc 01       	movw	r30, r24
 15a:	10 82       	st	Z, r1
    TCCR0B= (0<<CS02) |  (1<<CS01) |  (0<<CS00);
 15c:	85 e4       	ldi	r24, 0x45	; 69
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	22 e0       	ldi	r18, 0x02	; 2
 162:	fc 01       	movw	r30, r24
 164:	20 83       	st	Z, r18
}
 166:	df 91       	pop	r29
 168:	cf 91       	pop	r28
 16a:	08 95       	ret

0000016c <init_i2c>:
void init_i2c()
{
 16c:	cf 93       	push	r28
 16e:	df 93       	push	r29
 170:	cd b7       	in	r28, 0x3d	; 61
 172:	de b7       	in	r29, 0x3e	; 62
	i2c_init_(0x45);
 174:	8c eb       	ldi	r24, 0xBC	; 188
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	25 e4       	ldi	r18, 0x45	; 69
 17a:	fc 01       	movw	r30, r24
 17c:	20 83       	st	Z, r18
 17e:	88 eb       	ldi	r24, 0xB8	; 184
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	20 e2       	ldi	r18, 0x20	; 32
 184:	fc 01       	movw	r30, r24
 186:	20 83       	st	Z, r18
 188:	89 eb       	ldi	r24, 0xB9	; 185
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	fc 01       	movw	r30, r24
 18e:	10 82       	st	Z, r1
}
 190:	df 91       	pop	r29
 192:	cf 91       	pop	r28
 194:	08 95       	ret

00000196 <main>:

int main(void)
{
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
 19a:	cd b7       	in	r28, 0x3d	; 61
 19c:	de b7       	in	r29, 0x3e	; 62
 19e:	6c 97       	sbiw	r28, 0x1c	; 28
 1a0:	0f b6       	in	r0, 0x3f	; 63
 1a2:	f8 94       	cli
 1a4:	de bf       	out	0x3e, r29	; 62
 1a6:	0f be       	out	0x3f, r0	; 63
 1a8:	cd bf       	out	0x3d, r28	; 61
	inittimer();
 1aa:	0e 94 a6 00 	call	0x14c	; 0x14c <inittimer>
	init_i2c();
 1ae:	0e 94 b6 00 	call	0x16c	; 0x16c <init_i2c>

	DDRB |= (1<<DDRB4);          // set LED pin PB4 to output
 1b2:	84 e2       	ldi	r24, 0x24	; 36
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	24 e2       	ldi	r18, 0x24	; 36
 1b8:	30 e0       	ldi	r19, 0x00	; 0
 1ba:	f9 01       	movw	r30, r18
 1bc:	20 81       	ld	r18, Z
 1be:	20 61       	ori	r18, 0x10	; 16
 1c0:	fc 01       	movw	r30, r24
 1c2:	20 83       	st	Z, r18
    while(1)
    {
		PORTB |= 0x10;   // toggle pinb4
 1c4:	85 e2       	ldi	r24, 0x25	; 37
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	25 e2       	ldi	r18, 0x25	; 37
 1ca:	30 e0       	ldi	r19, 0x00	; 0
 1cc:	f9 01       	movw	r30, r18
 1ce:	20 81       	ld	r18, Z
 1d0:	20 61       	ori	r18, 0x10	; 16
 1d2:	fc 01       	movw	r30, r24
 1d4:	20 83       	st	Z, r18
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	a0 e8       	ldi	r26, 0x80	; 128
 1dc:	bf e3       	ldi	r27, 0x3F	; 63
 1de:	89 83       	std	Y+1, r24	; 0x01
 1e0:	9a 83       	std	Y+2, r25	; 0x02
 1e2:	ab 83       	std	Y+3, r26	; 0x03
 1e4:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 1e6:	20 e0       	ldi	r18, 0x00	; 0
 1e8:	30 e0       	ldi	r19, 0x00	; 0
 1ea:	4a ef       	ldi	r20, 0xFA	; 250
 1ec:	54 e4       	ldi	r21, 0x44	; 68
 1ee:	69 81       	ldd	r22, Y+1	; 0x01
 1f0:	7a 81       	ldd	r23, Y+2	; 0x02
 1f2:	8b 81       	ldd	r24, Y+3	; 0x03
 1f4:	9c 81       	ldd	r25, Y+4	; 0x04
 1f6:	0e 94 55 02 	call	0x4aa	; 0x4aa <__mulsf3>
 1fa:	dc 01       	movw	r26, r24
 1fc:	cb 01       	movw	r24, r22
 1fe:	8d 83       	std	Y+5, r24	; 0x05
 200:	9e 83       	std	Y+6, r25	; 0x06
 202:	af 83       	std	Y+7, r26	; 0x07
 204:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 206:	20 e0       	ldi	r18, 0x00	; 0
 208:	30 e0       	ldi	r19, 0x00	; 0
 20a:	40 e8       	ldi	r20, 0x80	; 128
 20c:	5f e3       	ldi	r21, 0x3F	; 63
 20e:	6d 81       	ldd	r22, Y+5	; 0x05
 210:	7e 81       	ldd	r23, Y+6	; 0x06
 212:	8f 81       	ldd	r24, Y+7	; 0x07
 214:	98 85       	ldd	r25, Y+8	; 0x08
 216:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <__cmpsf2>
 21a:	88 23       	and	r24, r24
 21c:	2c f4       	brge	.+10     	; 0x228 <main+0x92>
		__ticks = 1;
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	9a 87       	std	Y+10, r25	; 0x0a
 224:	89 87       	std	Y+9, r24	; 0x09
 226:	3f c0       	rjmp	.+126    	; 0x2a6 <main+0x110>
	else if (__tmp > 65535)
 228:	20 e0       	ldi	r18, 0x00	; 0
 22a:	3f ef       	ldi	r19, 0xFF	; 255
 22c:	4f e7       	ldi	r20, 0x7F	; 127
 22e:	57 e4       	ldi	r21, 0x47	; 71
 230:	6d 81       	ldd	r22, Y+5	; 0x05
 232:	7e 81       	ldd	r23, Y+6	; 0x06
 234:	8f 81       	ldd	r24, Y+7	; 0x07
 236:	98 85       	ldd	r25, Y+8	; 0x08
 238:	0e 94 51 02 	call	0x4a2	; 0x4a2 <__gesf2>
 23c:	18 16       	cp	r1, r24
 23e:	4c f5       	brge	.+82     	; 0x292 <main+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 240:	20 e0       	ldi	r18, 0x00	; 0
 242:	30 e0       	ldi	r19, 0x00	; 0
 244:	40 e2       	ldi	r20, 0x20	; 32
 246:	51 e4       	ldi	r21, 0x41	; 65
 248:	69 81       	ldd	r22, Y+1	; 0x01
 24a:	7a 81       	ldd	r23, Y+2	; 0x02
 24c:	8b 81       	ldd	r24, Y+3	; 0x03
 24e:	9c 81       	ldd	r25, Y+4	; 0x04
 250:	0e 94 55 02 	call	0x4aa	; 0x4aa <__mulsf3>
 254:	dc 01       	movw	r26, r24
 256:	cb 01       	movw	r24, r22
 258:	bc 01       	movw	r22, r24
 25a:	cd 01       	movw	r24, r26
 25c:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <__fixunssfsi>
 260:	dc 01       	movw	r26, r24
 262:	cb 01       	movw	r24, r22
 264:	9a 87       	std	Y+10, r25	; 0x0a
 266:	89 87       	std	Y+9, r24	; 0x09
 268:	0f c0       	rjmp	.+30     	; 0x288 <main+0xf2>
 26a:	88 ec       	ldi	r24, 0xC8	; 200
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	9c 87       	std	Y+12, r25	; 0x0c
 270:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 272:	8b 85       	ldd	r24, Y+11	; 0x0b
 274:	9c 85       	ldd	r25, Y+12	; 0x0c
 276:	01 97       	sbiw	r24, 0x01	; 1
 278:	f1 f7       	brne	.-4      	; 0x276 <main+0xe0>
 27a:	9c 87       	std	Y+12, r25	; 0x0c
 27c:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 27e:	89 85       	ldd	r24, Y+9	; 0x09
 280:	9a 85       	ldd	r25, Y+10	; 0x0a
 282:	01 97       	sbiw	r24, 0x01	; 1
 284:	9a 87       	std	Y+10, r25	; 0x0a
 286:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 288:	89 85       	ldd	r24, Y+9	; 0x09
 28a:	9a 85       	ldd	r25, Y+10	; 0x0a
 28c:	00 97       	sbiw	r24, 0x00	; 0
 28e:	69 f7       	brne	.-38     	; 0x26a <main+0xd4>
 290:	14 c0       	rjmp	.+40     	; 0x2ba <main+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 292:	6d 81       	ldd	r22, Y+5	; 0x05
 294:	7e 81       	ldd	r23, Y+6	; 0x06
 296:	8f 81       	ldd	r24, Y+7	; 0x07
 298:	98 85       	ldd	r25, Y+8	; 0x08
 29a:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <__fixunssfsi>
 29e:	dc 01       	movw	r26, r24
 2a0:	cb 01       	movw	r24, r22
 2a2:	9a 87       	std	Y+10, r25	; 0x0a
 2a4:	89 87       	std	Y+9, r24	; 0x09
 2a6:	89 85       	ldd	r24, Y+9	; 0x09
 2a8:	9a 85       	ldd	r25, Y+10	; 0x0a
 2aa:	9e 87       	std	Y+14, r25	; 0x0e
 2ac:	8d 87       	std	Y+13, r24	; 0x0d
 2ae:	8d 85       	ldd	r24, Y+13	; 0x0d
 2b0:	9e 85       	ldd	r25, Y+14	; 0x0e
 2b2:	01 97       	sbiw	r24, 0x01	; 1
 2b4:	f1 f7       	brne	.-4      	; 0x2b2 <main+0x11c>
 2b6:	9e 87       	std	Y+14, r25	; 0x0e
 2b8:	8d 87       	std	Y+13, r24	; 0x0d
		_delay_ms(1);         // delay 1 ms
		PORTB = 0x00;   // toggle pb4
 2ba:	85 e2       	ldi	r24, 0x25	; 37
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	fc 01       	movw	r30, r24
 2c0:	10 82       	st	Z, r1
 2c2:	80 e0       	ldi	r24, 0x00	; 0
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	a0 e1       	ldi	r26, 0x10	; 16
 2c8:	b1 e4       	ldi	r27, 0x41	; 65
 2ca:	8f 87       	std	Y+15, r24	; 0x0f
 2cc:	98 8b       	std	Y+16, r25	; 0x10
 2ce:	a9 8b       	std	Y+17, r26	; 0x11
 2d0:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 2d2:	20 e0       	ldi	r18, 0x00	; 0
 2d4:	30 e0       	ldi	r19, 0x00	; 0
 2d6:	4a ef       	ldi	r20, 0xFA	; 250
 2d8:	54 e4       	ldi	r21, 0x44	; 68
 2da:	6f 85       	ldd	r22, Y+15	; 0x0f
 2dc:	78 89       	ldd	r23, Y+16	; 0x10
 2de:	89 89       	ldd	r24, Y+17	; 0x11
 2e0:	9a 89       	ldd	r25, Y+18	; 0x12
 2e2:	0e 94 55 02 	call	0x4aa	; 0x4aa <__mulsf3>
 2e6:	dc 01       	movw	r26, r24
 2e8:	cb 01       	movw	r24, r22
 2ea:	8b 8b       	std	Y+19, r24	; 0x13
 2ec:	9c 8b       	std	Y+20, r25	; 0x14
 2ee:	ad 8b       	std	Y+21, r26	; 0x15
 2f0:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
 2f2:	20 e0       	ldi	r18, 0x00	; 0
 2f4:	30 e0       	ldi	r19, 0x00	; 0
 2f6:	40 e8       	ldi	r20, 0x80	; 128
 2f8:	5f e3       	ldi	r21, 0x3F	; 63
 2fa:	6b 89       	ldd	r22, Y+19	; 0x13
 2fc:	7c 89       	ldd	r23, Y+20	; 0x14
 2fe:	8d 89       	ldd	r24, Y+21	; 0x15
 300:	9e 89       	ldd	r25, Y+22	; 0x16
 302:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <__cmpsf2>
 306:	88 23       	and	r24, r24
 308:	2c f4       	brge	.+10     	; 0x314 <main+0x17e>
		__ticks = 1;
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	98 8f       	std	Y+24, r25	; 0x18
 310:	8f 8b       	std	Y+23, r24	; 0x17
 312:	3f c0       	rjmp	.+126    	; 0x392 <main+0x1fc>
	else if (__tmp > 65535)
 314:	20 e0       	ldi	r18, 0x00	; 0
 316:	3f ef       	ldi	r19, 0xFF	; 255
 318:	4f e7       	ldi	r20, 0x7F	; 127
 31a:	57 e4       	ldi	r21, 0x47	; 71
 31c:	6b 89       	ldd	r22, Y+19	; 0x13
 31e:	7c 89       	ldd	r23, Y+20	; 0x14
 320:	8d 89       	ldd	r24, Y+21	; 0x15
 322:	9e 89       	ldd	r25, Y+22	; 0x16
 324:	0e 94 51 02 	call	0x4a2	; 0x4a2 <__gesf2>
 328:	18 16       	cp	r1, r24
 32a:	4c f5       	brge	.+82     	; 0x37e <main+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 32c:	20 e0       	ldi	r18, 0x00	; 0
 32e:	30 e0       	ldi	r19, 0x00	; 0
 330:	40 e2       	ldi	r20, 0x20	; 32
 332:	51 e4       	ldi	r21, 0x41	; 65
 334:	6f 85       	ldd	r22, Y+15	; 0x0f
 336:	78 89       	ldd	r23, Y+16	; 0x10
 338:	89 89       	ldd	r24, Y+17	; 0x11
 33a:	9a 89       	ldd	r25, Y+18	; 0x12
 33c:	0e 94 55 02 	call	0x4aa	; 0x4aa <__mulsf3>
 340:	dc 01       	movw	r26, r24
 342:	cb 01       	movw	r24, r22
 344:	bc 01       	movw	r22, r24
 346:	cd 01       	movw	r24, r26
 348:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <__fixunssfsi>
 34c:	dc 01       	movw	r26, r24
 34e:	cb 01       	movw	r24, r22
 350:	98 8f       	std	Y+24, r25	; 0x18
 352:	8f 8b       	std	Y+23, r24	; 0x17
 354:	0f c0       	rjmp	.+30     	; 0x374 <main+0x1de>
 356:	88 ec       	ldi	r24, 0xC8	; 200
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	9a 8f       	std	Y+26, r25	; 0x1a
 35c:	89 8f       	std	Y+25, r24	; 0x19
 35e:	89 8d       	ldd	r24, Y+25	; 0x19
 360:	9a 8d       	ldd	r25, Y+26	; 0x1a
 362:	01 97       	sbiw	r24, 0x01	; 1
 364:	f1 f7       	brne	.-4      	; 0x362 <main+0x1cc>
 366:	9a 8f       	std	Y+26, r25	; 0x1a
 368:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 36a:	8f 89       	ldd	r24, Y+23	; 0x17
 36c:	98 8d       	ldd	r25, Y+24	; 0x18
 36e:	01 97       	sbiw	r24, 0x01	; 1
 370:	98 8f       	std	Y+24, r25	; 0x18
 372:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 374:	8f 89       	ldd	r24, Y+23	; 0x17
 376:	98 8d       	ldd	r25, Y+24	; 0x18
 378:	00 97       	sbiw	r24, 0x00	; 0
 37a:	69 f7       	brne	.-38     	; 0x356 <main+0x1c0>
		_delay_ms(9);         // delay 9 ms
		
	}
 37c:	23 cf       	rjmp	.-442    	; 0x1c4 <main+0x2e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 37e:	6b 89       	ldd	r22, Y+19	; 0x13
 380:	7c 89       	ldd	r23, Y+20	; 0x14
 382:	8d 89       	ldd	r24, Y+21	; 0x15
 384:	9e 89       	ldd	r25, Y+22	; 0x16
 386:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <__fixunssfsi>
 38a:	dc 01       	movw	r26, r24
 38c:	cb 01       	movw	r24, r22
 38e:	98 8f       	std	Y+24, r25	; 0x18
 390:	8f 8b       	std	Y+23, r24	; 0x17
 392:	8f 89       	ldd	r24, Y+23	; 0x17
 394:	98 8d       	ldd	r25, Y+24	; 0x18
 396:	9c 8f       	std	Y+28, r25	; 0x1c
 398:	8b 8f       	std	Y+27, r24	; 0x1b
 39a:	8b 8d       	ldd	r24, Y+27	; 0x1b
 39c:	9c 8d       	ldd	r25, Y+28	; 0x1c
 39e:	01 97       	sbiw	r24, 0x01	; 1
 3a0:	f1 f7       	brne	.-4      	; 0x39e <main+0x208>
 3a2:	9c 8f       	std	Y+28, r25	; 0x1c
 3a4:	8b 8f       	std	Y+27, r24	; 0x1b
 3a6:	0e cf       	rjmp	.-484    	; 0x1c4 <main+0x2e>

000003a8 <__cmpsf2>:
 3a8:	2f d0       	rcall	.+94     	; 0x408 <__fp_cmp>
 3aa:	08 f4       	brcc	.+2      	; 0x3ae <__cmpsf2+0x6>
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	08 95       	ret

000003b0 <__fixunssfsi>:
 3b0:	57 d0       	rcall	.+174    	; 0x460 <__fp_splitA>
 3b2:	88 f0       	brcs	.+34     	; 0x3d6 <__fixunssfsi+0x26>
 3b4:	9f 57       	subi	r25, 0x7F	; 127
 3b6:	90 f0       	brcs	.+36     	; 0x3dc <__fixunssfsi+0x2c>
 3b8:	b9 2f       	mov	r27, r25
 3ba:	99 27       	eor	r25, r25
 3bc:	b7 51       	subi	r27, 0x17	; 23
 3be:	a0 f0       	brcs	.+40     	; 0x3e8 <__fixunssfsi+0x38>
 3c0:	d1 f0       	breq	.+52     	; 0x3f6 <__fixunssfsi+0x46>
 3c2:	66 0f       	add	r22, r22
 3c4:	77 1f       	adc	r23, r23
 3c6:	88 1f       	adc	r24, r24
 3c8:	99 1f       	adc	r25, r25
 3ca:	1a f0       	brmi	.+6      	; 0x3d2 <__fixunssfsi+0x22>
 3cc:	ba 95       	dec	r27
 3ce:	c9 f7       	brne	.-14     	; 0x3c2 <__fixunssfsi+0x12>
 3d0:	12 c0       	rjmp	.+36     	; 0x3f6 <__fixunssfsi+0x46>
 3d2:	b1 30       	cpi	r27, 0x01	; 1
 3d4:	81 f0       	breq	.+32     	; 0x3f6 <__fixunssfsi+0x46>
 3d6:	5e d0       	rcall	.+188    	; 0x494 <__fp_zero>
 3d8:	b1 e0       	ldi	r27, 0x01	; 1
 3da:	08 95       	ret
 3dc:	5b c0       	rjmp	.+182    	; 0x494 <__fp_zero>
 3de:	67 2f       	mov	r22, r23
 3e0:	78 2f       	mov	r23, r24
 3e2:	88 27       	eor	r24, r24
 3e4:	b8 5f       	subi	r27, 0xF8	; 248
 3e6:	39 f0       	breq	.+14     	; 0x3f6 <__fixunssfsi+0x46>
 3e8:	b9 3f       	cpi	r27, 0xF9	; 249
 3ea:	cc f3       	brlt	.-14     	; 0x3de <__fixunssfsi+0x2e>
 3ec:	86 95       	lsr	r24
 3ee:	77 95       	ror	r23
 3f0:	67 95       	ror	r22
 3f2:	b3 95       	inc	r27
 3f4:	d9 f7       	brne	.-10     	; 0x3ec <__fixunssfsi+0x3c>
 3f6:	3e f4       	brtc	.+14     	; 0x406 <__fixunssfsi+0x56>
 3f8:	90 95       	com	r25
 3fa:	80 95       	com	r24
 3fc:	70 95       	com	r23
 3fe:	61 95       	neg	r22
 400:	7f 4f       	sbci	r23, 0xFF	; 255
 402:	8f 4f       	sbci	r24, 0xFF	; 255
 404:	9f 4f       	sbci	r25, 0xFF	; 255
 406:	08 95       	ret

00000408 <__fp_cmp>:
 408:	99 0f       	add	r25, r25
 40a:	00 08       	sbc	r0, r0
 40c:	55 0f       	add	r21, r21
 40e:	aa 0b       	sbc	r26, r26
 410:	e0 e8       	ldi	r30, 0x80	; 128
 412:	fe ef       	ldi	r31, 0xFE	; 254
 414:	16 16       	cp	r1, r22
 416:	17 06       	cpc	r1, r23
 418:	e8 07       	cpc	r30, r24
 41a:	f9 07       	cpc	r31, r25
 41c:	c0 f0       	brcs	.+48     	; 0x44e <__fp_cmp+0x46>
 41e:	12 16       	cp	r1, r18
 420:	13 06       	cpc	r1, r19
 422:	e4 07       	cpc	r30, r20
 424:	f5 07       	cpc	r31, r21
 426:	98 f0       	brcs	.+38     	; 0x44e <__fp_cmp+0x46>
 428:	62 1b       	sub	r22, r18
 42a:	73 0b       	sbc	r23, r19
 42c:	84 0b       	sbc	r24, r20
 42e:	95 0b       	sbc	r25, r21
 430:	39 f4       	brne	.+14     	; 0x440 <__fp_cmp+0x38>
 432:	0a 26       	eor	r0, r26
 434:	61 f0       	breq	.+24     	; 0x44e <__fp_cmp+0x46>
 436:	23 2b       	or	r18, r19
 438:	24 2b       	or	r18, r20
 43a:	25 2b       	or	r18, r21
 43c:	21 f4       	brne	.+8      	; 0x446 <__fp_cmp+0x3e>
 43e:	08 95       	ret
 440:	0a 26       	eor	r0, r26
 442:	09 f4       	brne	.+2      	; 0x446 <__fp_cmp+0x3e>
 444:	a1 40       	sbci	r26, 0x01	; 1
 446:	a6 95       	lsr	r26
 448:	8f ef       	ldi	r24, 0xFF	; 255
 44a:	81 1d       	adc	r24, r1
 44c:	81 1d       	adc	r24, r1
 44e:	08 95       	ret

00000450 <__fp_split3>:
 450:	57 fd       	sbrc	r21, 7
 452:	90 58       	subi	r25, 0x80	; 128
 454:	44 0f       	add	r20, r20
 456:	55 1f       	adc	r21, r21
 458:	59 f0       	breq	.+22     	; 0x470 <__fp_splitA+0x10>
 45a:	5f 3f       	cpi	r21, 0xFF	; 255
 45c:	71 f0       	breq	.+28     	; 0x47a <__fp_splitA+0x1a>
 45e:	47 95       	ror	r20

00000460 <__fp_splitA>:
 460:	88 0f       	add	r24, r24
 462:	97 fb       	bst	r25, 7
 464:	99 1f       	adc	r25, r25
 466:	61 f0       	breq	.+24     	; 0x480 <__fp_splitA+0x20>
 468:	9f 3f       	cpi	r25, 0xFF	; 255
 46a:	79 f0       	breq	.+30     	; 0x48a <__fp_splitA+0x2a>
 46c:	87 95       	ror	r24
 46e:	08 95       	ret
 470:	12 16       	cp	r1, r18
 472:	13 06       	cpc	r1, r19
 474:	14 06       	cpc	r1, r20
 476:	55 1f       	adc	r21, r21
 478:	f2 cf       	rjmp	.-28     	; 0x45e <__fp_split3+0xe>
 47a:	46 95       	lsr	r20
 47c:	f1 df       	rcall	.-30     	; 0x460 <__fp_splitA>
 47e:	08 c0       	rjmp	.+16     	; 0x490 <__fp_splitA+0x30>
 480:	16 16       	cp	r1, r22
 482:	17 06       	cpc	r1, r23
 484:	18 06       	cpc	r1, r24
 486:	99 1f       	adc	r25, r25
 488:	f1 cf       	rjmp	.-30     	; 0x46c <__fp_splitA+0xc>
 48a:	86 95       	lsr	r24
 48c:	71 05       	cpc	r23, r1
 48e:	61 05       	cpc	r22, r1
 490:	08 94       	sec
 492:	08 95       	ret

00000494 <__fp_zero>:
 494:	e8 94       	clt

00000496 <__fp_szero>:
 496:	bb 27       	eor	r27, r27
 498:	66 27       	eor	r22, r22
 49a:	77 27       	eor	r23, r23
 49c:	cb 01       	movw	r24, r22
 49e:	97 f9       	bld	r25, 7
 4a0:	08 95       	ret

000004a2 <__gesf2>:
 4a2:	b2 df       	rcall	.-156    	; 0x408 <__fp_cmp>
 4a4:	08 f4       	brcc	.+2      	; 0x4a8 <__gesf2+0x6>
 4a6:	8f ef       	ldi	r24, 0xFF	; 255
 4a8:	08 95       	ret

000004aa <__mulsf3>:
 4aa:	0b d0       	rcall	.+22     	; 0x4c2 <__mulsf3x>
 4ac:	78 c0       	rjmp	.+240    	; 0x59e <__fp_round>
 4ae:	69 d0       	rcall	.+210    	; 0x582 <__fp_pscA>
 4b0:	28 f0       	brcs	.+10     	; 0x4bc <__mulsf3+0x12>
 4b2:	6e d0       	rcall	.+220    	; 0x590 <__fp_pscB>
 4b4:	18 f0       	brcs	.+6      	; 0x4bc <__mulsf3+0x12>
 4b6:	95 23       	and	r25, r21
 4b8:	09 f0       	breq	.+2      	; 0x4bc <__mulsf3+0x12>
 4ba:	5a c0       	rjmp	.+180    	; 0x570 <__fp_inf>
 4bc:	5f c0       	rjmp	.+190    	; 0x57c <__fp_nan>
 4be:	11 24       	eor	r1, r1
 4c0:	ea cf       	rjmp	.-44     	; 0x496 <__fp_szero>

000004c2 <__mulsf3x>:
 4c2:	c6 df       	rcall	.-116    	; 0x450 <__fp_split3>
 4c4:	a0 f3       	brcs	.-24     	; 0x4ae <__mulsf3+0x4>

000004c6 <__mulsf3_pse>:
 4c6:	95 9f       	mul	r25, r21
 4c8:	d1 f3       	breq	.-12     	; 0x4be <__mulsf3+0x14>
 4ca:	95 0f       	add	r25, r21
 4cc:	50 e0       	ldi	r21, 0x00	; 0
 4ce:	55 1f       	adc	r21, r21
 4d0:	62 9f       	mul	r22, r18
 4d2:	f0 01       	movw	r30, r0
 4d4:	72 9f       	mul	r23, r18
 4d6:	bb 27       	eor	r27, r27
 4d8:	f0 0d       	add	r31, r0
 4da:	b1 1d       	adc	r27, r1
 4dc:	63 9f       	mul	r22, r19
 4de:	aa 27       	eor	r26, r26
 4e0:	f0 0d       	add	r31, r0
 4e2:	b1 1d       	adc	r27, r1
 4e4:	aa 1f       	adc	r26, r26
 4e6:	64 9f       	mul	r22, r20
 4e8:	66 27       	eor	r22, r22
 4ea:	b0 0d       	add	r27, r0
 4ec:	a1 1d       	adc	r26, r1
 4ee:	66 1f       	adc	r22, r22
 4f0:	82 9f       	mul	r24, r18
 4f2:	22 27       	eor	r18, r18
 4f4:	b0 0d       	add	r27, r0
 4f6:	a1 1d       	adc	r26, r1
 4f8:	62 1f       	adc	r22, r18
 4fa:	73 9f       	mul	r23, r19
 4fc:	b0 0d       	add	r27, r0
 4fe:	a1 1d       	adc	r26, r1
 500:	62 1f       	adc	r22, r18
 502:	83 9f       	mul	r24, r19
 504:	a0 0d       	add	r26, r0
 506:	61 1d       	adc	r22, r1
 508:	22 1f       	adc	r18, r18
 50a:	74 9f       	mul	r23, r20
 50c:	33 27       	eor	r19, r19
 50e:	a0 0d       	add	r26, r0
 510:	61 1d       	adc	r22, r1
 512:	23 1f       	adc	r18, r19
 514:	84 9f       	mul	r24, r20
 516:	60 0d       	add	r22, r0
 518:	21 1d       	adc	r18, r1
 51a:	82 2f       	mov	r24, r18
 51c:	76 2f       	mov	r23, r22
 51e:	6a 2f       	mov	r22, r26
 520:	11 24       	eor	r1, r1
 522:	9f 57       	subi	r25, 0x7F	; 127
 524:	50 40       	sbci	r21, 0x00	; 0
 526:	8a f0       	brmi	.+34     	; 0x54a <__mulsf3_pse+0x84>
 528:	e1 f0       	breq	.+56     	; 0x562 <__mulsf3_pse+0x9c>
 52a:	88 23       	and	r24, r24
 52c:	4a f0       	brmi	.+18     	; 0x540 <__mulsf3_pse+0x7a>
 52e:	ee 0f       	add	r30, r30
 530:	ff 1f       	adc	r31, r31
 532:	bb 1f       	adc	r27, r27
 534:	66 1f       	adc	r22, r22
 536:	77 1f       	adc	r23, r23
 538:	88 1f       	adc	r24, r24
 53a:	91 50       	subi	r25, 0x01	; 1
 53c:	50 40       	sbci	r21, 0x00	; 0
 53e:	a9 f7       	brne	.-22     	; 0x52a <__mulsf3_pse+0x64>
 540:	9e 3f       	cpi	r25, 0xFE	; 254
 542:	51 05       	cpc	r21, r1
 544:	70 f0       	brcs	.+28     	; 0x562 <__mulsf3_pse+0x9c>
 546:	14 c0       	rjmp	.+40     	; 0x570 <__fp_inf>
 548:	a6 cf       	rjmp	.-180    	; 0x496 <__fp_szero>
 54a:	5f 3f       	cpi	r21, 0xFF	; 255
 54c:	ec f3       	brlt	.-6      	; 0x548 <__mulsf3_pse+0x82>
 54e:	98 3e       	cpi	r25, 0xE8	; 232
 550:	dc f3       	brlt	.-10     	; 0x548 <__mulsf3_pse+0x82>
 552:	86 95       	lsr	r24
 554:	77 95       	ror	r23
 556:	67 95       	ror	r22
 558:	b7 95       	ror	r27
 55a:	f7 95       	ror	r31
 55c:	e7 95       	ror	r30
 55e:	9f 5f       	subi	r25, 0xFF	; 255
 560:	c1 f7       	brne	.-16     	; 0x552 <__mulsf3_pse+0x8c>
 562:	fe 2b       	or	r31, r30
 564:	88 0f       	add	r24, r24
 566:	91 1d       	adc	r25, r1
 568:	96 95       	lsr	r25
 56a:	87 95       	ror	r24
 56c:	97 f9       	bld	r25, 7
 56e:	08 95       	ret

00000570 <__fp_inf>:
 570:	97 f9       	bld	r25, 7
 572:	9f 67       	ori	r25, 0x7F	; 127
 574:	80 e8       	ldi	r24, 0x80	; 128
 576:	70 e0       	ldi	r23, 0x00	; 0
 578:	60 e0       	ldi	r22, 0x00	; 0
 57a:	08 95       	ret

0000057c <__fp_nan>:
 57c:	9f ef       	ldi	r25, 0xFF	; 255
 57e:	80 ec       	ldi	r24, 0xC0	; 192
 580:	08 95       	ret

00000582 <__fp_pscA>:
 582:	00 24       	eor	r0, r0
 584:	0a 94       	dec	r0
 586:	16 16       	cp	r1, r22
 588:	17 06       	cpc	r1, r23
 58a:	18 06       	cpc	r1, r24
 58c:	09 06       	cpc	r0, r25
 58e:	08 95       	ret

00000590 <__fp_pscB>:
 590:	00 24       	eor	r0, r0
 592:	0a 94       	dec	r0
 594:	12 16       	cp	r1, r18
 596:	13 06       	cpc	r1, r19
 598:	14 06       	cpc	r1, r20
 59a:	05 06       	cpc	r0, r21
 59c:	08 95       	ret

0000059e <__fp_round>:
 59e:	09 2e       	mov	r0, r25
 5a0:	03 94       	inc	r0
 5a2:	00 0c       	add	r0, r0
 5a4:	11 f4       	brne	.+4      	; 0x5aa <__fp_round+0xc>
 5a6:	88 23       	and	r24, r24
 5a8:	52 f0       	brmi	.+20     	; 0x5be <__fp_round+0x20>
 5aa:	bb 0f       	add	r27, r27
 5ac:	40 f4       	brcc	.+16     	; 0x5be <__fp_round+0x20>
 5ae:	bf 2b       	or	r27, r31
 5b0:	11 f4       	brne	.+4      	; 0x5b6 <__fp_round+0x18>
 5b2:	60 ff       	sbrs	r22, 0
 5b4:	04 c0       	rjmp	.+8      	; 0x5be <__fp_round+0x20>
 5b6:	6f 5f       	subi	r22, 0xFF	; 255
 5b8:	7f 4f       	sbci	r23, 0xFF	; 255
 5ba:	8f 4f       	sbci	r24, 0xFF	; 255
 5bc:	9f 4f       	sbci	r25, 0xFF	; 255
 5be:	08 95       	ret

000005c0 <_exit>:
 5c0:	f8 94       	cli

000005c2 <__stop_program>:
 5c2:	ff cf       	rjmp	.-2      	; 0x5c2 <__stop_program>
